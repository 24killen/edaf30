<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="Rabbit.cpp" line="5" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;track&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Rabbit.cpp" line="14" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;track&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Rabbit.cpp" line="36" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;track&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Track.h" line="8" id="noExplicitConstructor" severity="style" msg="Class &apos;Track&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="RabbitRace.h" line="14" id="noExplicitConstructor" severity="style" msg="Class &apos;RabbitRace&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Track.cpp" line="6" id="uninitMemberVar" severity="style" msg="Member variable &apos;Track::position&apos; is not initialized in the constructor." />
    <error file="Track.cpp" line="6" id="uninitMemberVar" severity="style" msg="Member variable &apos;Track::lenght&apos; is not initialized in the constructor." />
    <error file="Track.cpp" line="10" id="operatorEqVarError" severity="style" msg="Member variable &apos;Track::position&apos; is not assigned a value in &apos;Track::operator=&apos;." />
    <error file="Track.cpp" line="10" id="operatorEqVarError" severity="style" msg="Member variable &apos;Track::lenght&apos; is not assigned a value in &apos;Track::operator=&apos;." />
    <error file="main.cpp" line="8" id="unreadVariable" severity="style" msg="Variable &apos;goodEntry&apos; is assigned a value that is never used." />
    <error file="Track.cpp" line="16" id="unusedFunction" severity="style" msg="The function &apos;getLenght&apos; is never used." />
    <error file="Rabbit.cpp" line="62" id="unusedFunction" severity="style" msg="The function &apos;setMoveDistances&apos; is never used." />
    <error file="Rabbit.cpp" line="57" id="unusedFunction" severity="style" msg="The function &apos;setProbabilities&apos; is never used." />
    <error id="missingIncludeSystem" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
